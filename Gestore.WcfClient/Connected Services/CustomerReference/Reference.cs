//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gestore.WcfClient.CustomerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/Gestore.Core.Models")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerCode {
            get {
                return this.CustomerCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerCodeField, value) != true)) {
                    this.CustomerCodeField = value;
                    this.RaisePropertyChanged("CustomerCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerReference.ICustomerService")]
    public interface ICustomerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/FetchAllCustomers", ReplyAction="http://tempuri.org/ICustomerService/FetchAllCustomersResponse")]
        System.Collections.Generic.LinkedList<Gestore.WcfClient.CustomerReference.Customer> FetchAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/FetchAllCustomers", ReplyAction="http://tempuri.org/ICustomerService/FetchAllCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.LinkedList<Gestore.WcfClient.CustomerReference.Customer>> FetchAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerById", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByIdResponse")]
        Gestore.WcfClient.CustomerReference.Customer GetCustomerById(int idCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerById", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByIdResponse")]
        System.Threading.Tasks.Task<Gestore.WcfClient.CustomerReference.Customer> GetCustomerByIdAsync(int idCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/CreateCustomer", ReplyAction="http://tempuri.org/ICustomerService/CreateCustomerResponse")]
        bool CreateCustomer(Gestore.WcfClient.CustomerReference.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/CreateCustomer", ReplyAction="http://tempuri.org/ICustomerService/CreateCustomerResponse")]
        System.Threading.Tasks.Task<bool> CreateCustomerAsync(Gestore.WcfClient.CustomerReference.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/UpdateCustomer", ReplyAction="http://tempuri.org/ICustomerService/UpdateCustomerResponse")]
        bool UpdateCustomer(Gestore.WcfClient.CustomerReference.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/UpdateCustomer", ReplyAction="http://tempuri.org/ICustomerService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerAsync(Gestore.WcfClient.CustomerReference.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/DeleteCustomerById", ReplyAction="http://tempuri.org/ICustomerService/DeleteCustomerByIdResponse")]
        bool DeleteCustomerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/DeleteCustomerById", ReplyAction="http://tempuri.org/ICustomerService/DeleteCustomerByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteCustomerByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerServiceChannel : Gestore.WcfClient.CustomerReference.ICustomerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<Gestore.WcfClient.CustomerReference.ICustomerService>, Gestore.WcfClient.CustomerReference.ICustomerService {
        
        public CustomerServiceClient() {
        }
        
        public CustomerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.LinkedList<Gestore.WcfClient.CustomerReference.Customer> FetchAllCustomers() {
            return base.Channel.FetchAllCustomers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.LinkedList<Gestore.WcfClient.CustomerReference.Customer>> FetchAllCustomersAsync() {
            return base.Channel.FetchAllCustomersAsync();
        }
        
        public Gestore.WcfClient.CustomerReference.Customer GetCustomerById(int idCustomer) {
            return base.Channel.GetCustomerById(idCustomer);
        }
        
        public System.Threading.Tasks.Task<Gestore.WcfClient.CustomerReference.Customer> GetCustomerByIdAsync(int idCustomer) {
            return base.Channel.GetCustomerByIdAsync(idCustomer);
        }
        
        public bool CreateCustomer(Gestore.WcfClient.CustomerReference.Customer customer) {
            return base.Channel.CreateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCustomerAsync(Gestore.WcfClient.CustomerReference.Customer customer) {
            return base.Channel.CreateCustomerAsync(customer);
        }
        
        public bool UpdateCustomer(Gestore.WcfClient.CustomerReference.Customer customer) {
            return base.Channel.UpdateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerAsync(Gestore.WcfClient.CustomerReference.Customer customer) {
            return base.Channel.UpdateCustomerAsync(customer);
        }
        
        public bool DeleteCustomerById(int id) {
            return base.Channel.DeleteCustomerById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCustomerByIdAsync(int id) {
            return base.Channel.DeleteCustomerByIdAsync(id);
        }
    }
}
